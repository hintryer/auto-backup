name: 每日生成clash相关文件
on:
  schedule:
    # 每天UTC时间0点运行，北京时间为上午8点
    - cron: '0 0 * * *'
  workflow_dispatch:  # 允许手动触发

jobs:
  generate-clash-files:
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码仓库
        uses: actions/checkout@v4

      - name: 设置Python环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 安装依赖
        run: pip install requests urllib3

      - name: 生成URL列表和内容合并文件
        run: |
          import os
          import requests
          from datetime import datetime
          from requests.adapters import HTTPAdapter
          from urllib3.util.retry import Retry

          # 配置请求重试机制和浏览器头信息
          def create_session_with_retry(retries=3, backoff_factor=0.3):
              session = requests.Session()
              
              # 添加浏览器请求头，模拟正常访问
              session.headers = {
                  'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
                  'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                  'Accept-Language': 'zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3',
                  'Connection': 'keep-alive',
                  'Upgrade-Insecure-Requests': '1'
              }
              
              # 配置重试策略
              retry = Retry(
                  total=retries,
                  read=retries,
                  connect=retries,
                  backoff_factor=backoff_factor,
                  status_forcelist=(429, 500, 502, 504)
              )
              adapter = HTTPAdapter(max_retries=retry)
              session.mount('http://', adapter)
              session.mount('https://', adapter)
              return session

          # 获取当前日期，格式为YYYYMMDD
          current_date = datetime.now().strftime("%Y%m%d")
          print(f"当前日期: {current_date}")
          
          # 要处理的文件URL模板列表
          url_templates = [
              "https://node.freeclashnode.com/uploads/{year}/{month}/0-{date}.yaml",
              "https://node.freeclashnode.com/uploads/{year}/{month}/1-{date}.yaml",
              "https://node.freeclashnode.com/uploads/{year}/{month}/2-{date}.yaml",
              "https://node.freeclashnode.com/uploads/{year}/{month}/3-{date}.yaml",
              "https://node.freeclashnode.com/uploads/{year}/{month}/4-{date}.yaml",
              "http://mlfenx.cczzuu.top/node/{date}-clash.yaml",
              "http://clashshare.cczzuu.top/node/{date}-clash.yaml",
              "https://node.openclash.cc/uploads/{year}/{month}/0-{date}.yaml",
              "https://node.openclash.cc/uploads/{year}/{month}/1-{date}.yaml",
              "https://node.openclash.cc/uploads/{year}/{month}/2-{date}.yaml",
              "https://node.openclash.cc/uploads/{year}/{month}/3-{date}.yaml",
              "https://node.openclash.cc/uploads/{year}/{month}/4-{date}.yaml",
              "https://node.freeclashverge.com/uploads/{year}/{month}/0-{date}.yaml",
              "https://node.freeclashverge.com/uploads/{year}/{month}/1-{date}.yaml",
              "https://node.freeclashverge.com/uploads/{year}/{month}/2-{date}.yaml",
              "https://node.freeclashverge.com/uploads/{year}/{month}/4-{date}.yaml",
              "https://free.datiya.com/uploads/{date}-clash.yaml"
          ]
          
          # 解析年、月
          year = current_date[:4]
          month = current_date[4:6]
          
          # 生成实际URL列表
          urls = [template.format(year=year, month=month, date=current_date) for template in url_templates]
          
          # 1. 生成纯URL文件 clashno.yaml（仅URL，无额外内容）
          with open('clashno.yaml', 'w', encoding='utf-8') as f:
              for url in urls:
                  f.write(f"{url}\n")
          
          # 2. 准备内容合并文件 clash.yaml 的内容
          content = ""
          
          # 创建带有重试机制的会话
          session = create_session_with_retry()
          
          # 为每个URL获取内容并合并
          for url in urls:
              try:
                  print(f"正在处理: {url}")
                  
                  # 发送请求
                  response = session.get(url, timeout=15)
                  response.raise_for_status()  # 检查请求是否成功
                  
                  # 仅添加原始内容，不同来源内容之间用空行分隔
                  content += response.text + "\n\n"
                  
              except Exception as e:
                  print(f"处理失败 {url}: {str(e)}")
                  # 失败时不向文件中添加任何内容
                  continue  # 继续处理下一个链接
          
          # 保存合并后的内容到clash.yaml
          with open('clash.yaml', 'w', encoding='utf-8') as f:
              f.write(content)
          
          print("已生成clashno.yaml和clash.yaml文件")

        shell: python {0}

      - name: 提交更新
        run: |
          git config --global user.name 'GitHub Action'
          git config --global user.email 'action@github.com'
          git add clashno.yaml clash.yaml
          git commit -m "每日自动更新clash相关文件: $(date +'%Y-%m-%d')" || echo "没有更新内容"
          git push
    
